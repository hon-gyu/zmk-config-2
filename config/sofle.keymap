/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
// ZMK includes

#include "includes/zmk-helpers/helper.h"
#include "includes/zmk-helpers/keypos_def/keypos_60keys.h"

#define KEYS_L LN0 LN1 LN2 LN2 LN4 LN5 LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5
#define KEYS_R RN0 RN1 RN2 RN3 RN4 RN5 RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5
#define KEYS_T LH4 LH3 LH2 LH1 LH0 RH0 RH1 RH2 RH3 RH4

#include "includes/settings.dtsi"
#include "includes/behaviours_homerow_mods.dtsi"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>

#define BASE 0
#define LOWER 1
#define RAISE 2
#define ADJUST 3

&soft_off {
    hold-time-ms = <5000>; // Only turn off it the key is held for 5 seconds or longer.
};

/ {
    // Activate ADJUST layer by pressing raise and lower

    conditional_layers { compatible = "zmk,conditional-layers"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "default";

            // ------------------------------------------------------------------------------------------------------------
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |       |
            // |  ESC  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   | BKSPC |
            // |  TAB  |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |  MUTE  |  |       |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //               | GUI | ALT  | CTRL | LOWER|  SPACE |  | ENTER | RAISE| CTRL  | ALT   | GUI  |

            bindings = <
&kp GRAVE     &kp N1                &kp N2         &kp N3        &kp N4        &kp N5                                  &kp N6           &kp N7        &kp N8         &kp N9         &kp N0                   &none
&kp TAB       &kp Q                 &kp W          &kp E         &kp R         &kp T                                   &kp Y            &kp U         &kp I          &kp O          &kp P                    &kp BSPC
&kp CAPSLOCK  &hm_shift_l LSHIFT A  &hm_l LCTRL S  &hm_l LALT D  &hm_l LGUI F  &kp G                                   &kp H            &hm_r RGUI J  &hm_r RALT K   &hm_r RCTRL L  &hm_shift_r RSHIFT SEMI  &kp SQT
&kp LSHFT     &kp Z                 &kp X          &kp C         &kp V         &kp B        &kp C_MUTE    &none        &kp N            &kp M         &kp COMMA      &kp DOT        &kp FSLH                 &kp RSHFT
                                    &kp LEFT_ALT   &kp LEFT_GUI  &lt 4 ESC     &lt 1 SPACE  &lt 2 TAB     &lt 6 ENTER  &lt 0 BACKSPACE  &lt 7 DEL     &kp RIGHT_GUI  &kp RIGHT_ALT
            >;

            sensor-bindings =
                <&inc_dec_kp C_VOL_UP C_VOL_DN>,
                <&inc_dec_kp F1 F2>;
        };

        Nav {
            bindings = <
&trans  &trans     &trans     &trans    &trans    &trans                       &trans         &trans          &trans         &trans        &trans         &trans
&trans  &trans     &trans     &trans    &trans    &trans                       &kp C_AC_REDO  &kp C_AC_PASTE  &kp C_AC_COPY  &kp C_AC_CUT  &kp C_AC_UNDO  &trans
&trans  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &trans                       &kp CAPS       &kp LEFT        &kp DOWN       &kp UP        &kp RIGHT      &trans
&trans  &trans     &trans     &trans    &trans    &trans  &trans    &trans     &kp INSERT     &kp HOME        &kp PAGE_DOWN  &kp PAGE_UP   &kp END        &trans
                   &trans     &trans    &trans    &trans  &trans    &kp ENTER  &kp BSPC       &kp DEL         &trans         &trans
            >;
        };

        Mouse {
            bindings = <
&trans  &trans     &trans     &trans    &trans    &trans                       &trans         &trans          &trans         &trans        &trans         &trans
&trans  &trans     &trans     &trans    &trans    &trans                       &kp C_AC_REDO  &kp C_AC_PASTE  &kp C_AC_COPY  &kp C_AC_CUT  &kp C_AC_UNDO  &trans
&trans  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &trans                       &trans         &trans          &trans         &trans        &trans         &trans
&trans  &trans     &trans     &trans    &trans    &trans  &trans    &trans     &trans         &trans          &trans         &trans        &trans         &trans
                   &trans     &trans    &trans    &trans  &trans    &mkp RCLK  &mkp LCLK      &mkp MCLK       &trans         &trans
            >;
        };

        Button {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;
        };

        Media {
            bindings = <
&trans  &trans     &trans     &trans    &trans    &trans                         &trans             &trans        &trans        &trans           &trans        &trans
&trans  &trans     &trans     &trans    &trans    &trans                         &trans             &trans        &trans        &trans           &trans        &trans
&trans  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &trans                         &ext_power EP_TOG  &kp C_PREV    &kp C_VOL_DN  &kp C_VOLUME_UP  &kp C_NEXT    &trans
&trans  &trans     &trans     &trans    &trans    &trans  &trans    &trans       &trans             &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2     &bt BT_SEL 3  &trans
                   &trans     &trans    &trans    &trans  &trans    &kp C_EJECT  &kp C_PLAY_PAUSE   &kp C_MUTE    &trans        &trans
            >;
        };

        Num {
            bindings = <
&trans  &trans     &trans  &trans  &trans   &trans                          &trans  &trans    &trans    &trans             &trans     &trans
&trans  &kp LBKT   &kp N7  &kp N8  &kp N9   &kp RBKT                        &trans  &trans    &trans    &trans             &trans     &trans
&trans  &kp SEMI   &kp N4  &kp N5  &kp N6   &kp EQUAL                       &trans  &kp RGUI  &kp RALT  &kp RIGHT_CONTROL  &kp RSHFT  &trans
&trans  &kp GRAVE  &kp N1  &kp N2  &kp N3   &kp BSLH   &trans       &trans  &trans  &trans    &trans    &trans             &trans     &trans
                   &trans  &trans  &kp DOT  &kp N0     &kp MINUS    &trans  &trans  &trans    &trans    &trans
            >;
        };

        Sym {
            bindings = <
&trans  &trans         &trans        &trans         &trans         &trans                                 &trans  &trans    &trans    &trans     &trans     &trans
&trans  &kp LS(LBRC)   &kp LS(AMPS)  &kp LS(STAR)   &kp LS(LPAR)   &kp LS(RBRC)                           &trans  &trans    &trans    &trans     &trans     &trans
&trans  &kp LS(COLON)  &kp LS(DLLR)  &kp LS(PRCNT)  &kp LS(CARET)  &kp LS(PLUS)                           &trans  &kp RGUI  &kp RALT  &kp LCTRL  &kp RSHFT  &trans
&trans  &kp LSHFT      &kp LS(EXCL)  &kp LS(AT)     &kp LS(POUND)  &kp LS(PIPE)  &trans           &trans  &trans  &trans    &trans    &trans     &trans     &trans
                       &trans        &trans         &kp LS(LPAR)   &kp LS(RPAR)  &kp LS(UNDER)    &trans  &trans  &trans    &trans    &trans
            >;
        };

        Fun {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans
                &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
